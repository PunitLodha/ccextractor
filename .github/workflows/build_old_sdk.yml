name: win
on: [push, workflow_dispatch]

jobs:
  build_debug:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2.3.4
      - name: cache
        uses: actions/cache@v2
        with:
          path: |
            src/rust/.cargo/registry
            src/rust/.cargo/git
            src/rust/target
            windows/debug
            C:/Program Files/LLVM
          key: ${{ runner.os }}-cargoNew-${{ hashFiles('**/Cargo.lock') }}
      - name: Install llvm and clang
        run: choco install llvm
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v1.0.2
      - name: pre rust build
        env:
          LIBCLANG_PATH: "C:\\Program Files\\LLVM\\lib"
          LLVM_CONFIG_PATH: "C:\\Program Files\\LLVM\\bin\\llvm-config"
          CARGO_TARGET_DIR: "..\\..\\windows"
          BINDGEN_EXTRA_CLANG_ARGS: -fmsc-version=0
        run: .\rust.bat
        working-directory: ./windows
      - name: build Debug
        run: msbuild ccextractor.sln /p:Configuration=Debug /p:Platform=x64
        working-directory: ./windows
      - name: ls
        if: always()
        run: dir
        working-directory: ./windows/x64
      - name: Display version information
        run: ./ccextractorwin.exe --version
        working-directory: ./windows/Debug
  build_non_ocr_release:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2.3.4
      - name: cache
        uses: actions/cache@v2
        with:
          path: |
            src/rust/.cargo/registry
            src/rust/.cargo/git
            src/rust/target
            windows/debug
            C:/Program Files/LLVM
          key: ${{ runner.os }}-cargoNew-${{ hashFiles('**/Cargo.lock') }}
      - name: Install llvm and clang
        run: choco install llvm
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v1.0.2
      - name: pre rust build
        env:
          LIBCLANG_PATH: "C:\\Program Files\\LLVM\\lib"
          LLVM_CONFIG_PATH: "C:\\Program Files\\LLVM\\bin\\llvm-config"
          CARGO_TARGET_DIR: "..\\..\\windows"
          BINDGEN_EXTRA_CLANG_ARGS: -fmsc-version=0
        run: .\rust.bat
        working-directory: ./windows
      - name: build Release
        run: msbuild ccextractor.sln /p:Configuration=Release
        working-directory: ./windows
      - name: Display version information
        run: ./ccextractorwin.exe --version
        working-directory: ./windows/Release
  build_non_ocr_debug:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2.3.4
      - name: cache
        uses: actions/cache@v2
        with:
          path: |
            src/rust/.cargo/registry
            src/rust/.cargo/git
            src/rust/target
            windows/debug
            C:/Program Files/LLVM
          key: ${{ runner.os }}-cargoNew-${{ hashFiles('**/Cargo.lock') }}
      - name: Install llvm and clang
        run: choco install llvm
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v1.0.2
      - name: pre rust build
        env:
          LIBCLANG_PATH: "C:\\Program Files\\LLVM\\lib"
          LLVM_CONFIG_PATH: "C:\\Program Files\\LLVM\\bin\\llvm-config"
          CARGO_TARGET_DIR: "..\\..\\windows"
          BINDGEN_EXTRA_CLANG_ARGS: -fmsc-version=0
        run: .\rust.bat
        working-directory: ./windows
      - name: build Debug
        run: msbuild ccextractor.sln /p:Configuration=Debug
        working-directory: ./windows
      - name: ls
        run: dir
        working-directory: ./windows/x64
      - name: Display version information
        run: ./ccextractorwin.exe --version
        working-directory: ./windows/Debug
  build_ocr_hardsubx_release:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2.3.4
      - name: cache
        uses: actions/cache@v2
        with:
          path: |
            src/rust/.cargo/registry
            src/rust/.cargo/git
            src/rust/target
            windows/debug
            C:/Program Files/LLVM
          key: ${{ runner.os }}-cargoNew-${{ hashFiles('**/Cargo.lock') }}
      - name: Install llvm and clang
        run: choco install llvm
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v1.0.2
      - name: pre rust build
        env:
          LIBCLANG_PATH: "C:\\Program Files\\LLVM\\lib"
          LLVM_CONFIG_PATH: "C:\\Program Files\\LLVM\\bin\\llvm-config"
          CARGO_TARGET_DIR: "..\\..\\windows"
          BINDGEN_EXTRA_CLANG_ARGS: -fmsc-version=0
        run: .\rust.bat
        working-directory: ./windows
      - name: build Release
        run: msbuild ccextractor.sln /p:Configuration=Release-Full
        working-directory: ./windows
      - name: Display version information
        run: ./ccextractorwinfull.exe --version
        working-directory: ./windows/Release-Full
  build_ocr_hardsubx_debug:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2.3.4
      - name: cache
        uses: actions/cache@v2
        with:
          path: |
            src/rust/.cargo/registry
            src/rust/.cargo/git
            src/rust/target
            windows/debug
            C:/Program Files/LLVM
          key: ${{ runner.os }}-cargoNew-${{ hashFiles('**/Cargo.lock') }}
      - name: Install llvm and clang
        run: choco install llvm
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v1.0.2
      - name: pre rust build
        env:
          LIBCLANG_PATH: "C:\\Program Files\\LLVM\\lib"
          LLVM_CONFIG_PATH: "C:\\Program Files\\LLVM\\bin\\llvm-config"
          CARGO_TARGET_DIR: "..\\..\\windows"
          BINDGEN_EXTRA_CLANG_ARGS: -fmsc-version=0
        run: .\rust.bat
        working-directory: ./windows
      - name: build Debug
        run: msbuild ccextractor.sln /p:Configuration=Debug-Full
        working-directory: ./windows
      - name: Display version information
        run: ./ccextractorwinfull.exe --version
        working-directory: ./windows/Debug-Full
